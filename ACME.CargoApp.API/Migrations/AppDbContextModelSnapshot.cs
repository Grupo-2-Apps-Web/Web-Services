// <auto-generated />
using System;
using ACME.CargoApp.API.Shared.Infrastructure.Persistence.EFC.Configuration;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ACME.CargoApp.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ACME.CargoApp.API.IAM.Domain.Model.Aggregates.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password_hash");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("p_k_iam_users");

                    b.ToTable("iam_users", (string)null);
                });

            modelBuilder.Entity("ACME.CargoApp.API.Registration.Domain.Model.Aggregates.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("client_id");

                    b.Property<int>("DriverId")
                        .HasColumnType("int")
                        .HasColumnName("driver_id");

                    b.Property<int>("EntrepreneurId")
                        .HasColumnType("int")
                        .HasColumnName("entrepreneur_id");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id")
                        .HasName("p_k_trips");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("i_x_trips_client_id");

                    b.HasIndex("DriverId")
                        .HasDatabaseName("i_x_trips_driver_id");

                    b.HasIndex("EntrepreneurId")
                        .HasDatabaseName("i_x_trips_entrepreneur_id");

                    b.HasIndex("VehicleId")
                        .HasDatabaseName("i_x_trips_vehicle_id");

                    b.ToTable("trips");
                });

            modelBuilder.Entity("ACME.CargoApp.API.Registration.Domain.Model.Entities.Alert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("title");

                    b.Property<int>("TripId")
                        .HasColumnType("int")
                        .HasColumnName("trip_id");

                    b.HasKey("Id")
                        .HasName("p_k_alerts");

                    b.HasIndex("TripId")
                        .IsUnique()
                        .HasDatabaseName("i_x_alerts_trip_id");

                    b.ToTable("alerts");
                });

            modelBuilder.Entity("ACME.CargoApp.API.Registration.Domain.Model.Entities.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("contact_number");

                    b.Property<string>("Dni")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("dni");

                    b.Property<string>("License")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("license");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("p_k_drivers");

                    b.ToTable("drivers");
                });

            modelBuilder.Entity("ACME.CargoApp.API.Registration.Domain.Model.Entities.Evidence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("link");

                    b.Property<int>("TripId")
                        .HasColumnType("int")
                        .HasColumnName("trip_id");

                    b.HasKey("Id")
                        .HasName("p_k_evidences");

                    b.HasIndex("TripId")
                        .IsUnique()
                        .HasDatabaseName("i_x_evidences_trip_id");

                    b.ToTable("evidences");
                });

            modelBuilder.Entity("ACME.CargoApp.API.Registration.Domain.Model.Entities.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("FuelAmount")
                        .HasColumnType("int")
                        .HasColumnName("fuel_amount");

                    b.Property<string>("FuelDescription")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("fuel_description");

                    b.Property<int>("TollsAmount")
                        .HasColumnType("int")
                        .HasColumnName("tolls_amount");

                    b.Property<string>("TollsDescription")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tolls_description");

                    b.Property<int>("TripId")
                        .HasColumnType("int")
                        .HasColumnName("trip_id");

                    b.Property<int>("ViaticsAmount")
                        .HasColumnType("int")
                        .HasColumnName("viatics_amount");

                    b.Property<string>("ViaticsDescription")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("viatics_description");

                    b.HasKey("Id")
                        .HasName("p_k_expenses");

                    b.HasIndex("TripId")
                        .IsUnique()
                        .HasDatabaseName("i_x_expenses_trip_id");

                    b.ToTable("expenses");
                });

            modelBuilder.Entity("ACME.CargoApp.API.Registration.Domain.Model.Entities.OngoingTrip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("Distance")
                        .HasColumnType("int")
                        .HasColumnName("distance");

                    b.Property<float>("Latitude")
                        .HasColumnType("float")
                        .HasColumnName("latitude");

                    b.Property<float>("Longitude")
                        .HasColumnType("float")
                        .HasColumnName("longitude");

                    b.Property<int>("Speed")
                        .HasColumnType("int")
                        .HasColumnName("speed");

                    b.Property<int>("TripId")
                        .HasColumnType("int")
                        .HasColumnName("trip_id");

                    b.HasKey("Id")
                        .HasName("p_k_ongoing_trips");

                    b.HasIndex("TripId")
                        .IsUnique()
                        .HasDatabaseName("i_x_ongoing_trips_trip_id");

                    b.ToTable("ongoing_trips");
                });

            modelBuilder.Entity("ACME.CargoApp.API.Registration.Domain.Model.Entities.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<float>("MaxLoad")
                        .HasPrecision(6, 2)
                        .HasColumnType("float")
                        .HasColumnName("max_load");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("model");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("plate");

                    b.Property<string>("TractorPlate")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("tractor_plate");

                    b.Property<float>("Volume")
                        .HasPrecision(6, 2)
                        .HasColumnType("float")
                        .HasColumnName("volume");

                    b.HasKey("Id")
                        .HasName("p_k_vehicles");

                    b.ToTable("vehicles");
                });

            modelBuilder.Entity("ACME.CargoApp.API.User.Domain.Model.Aggregates.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.HasKey("Id")
                        .HasName("p_k_users");

                    b.ToTable("users");
                });

            modelBuilder.Entity("ACME.CargoApp.API.User.Domain.Model.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("p_k_clients");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("i_x_clients_user_id");

                    b.ToTable("clients");
                });

            modelBuilder.Entity("ACME.CargoApp.API.User.Domain.Model.Entities.Configuration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<bool>("AllowDataCollection")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("allow_data_collection");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("theme");

                    b.Property<bool>("UpdateDataSharing")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("update_data_sharing");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("View")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("view");

                    b.HasKey("Id")
                        .HasName("p_k_configurations");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("i_x_configurations_user_id");

                    b.ToTable("configurations");
                });

            modelBuilder.Entity("ACME.CargoApp.API.User.Domain.Model.Entities.Entrepreneur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("LogoImage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("logo_image");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("p_k_entrepreneurs");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("i_x_entrepreneurs_user_id");

                    b.ToTable("entrepreneurs");
                });

            modelBuilder.Entity("ACME.CargoApp.API.Registration.Domain.Model.Aggregates.Trip", b =>
                {
                    b.HasOne("ACME.CargoApp.API.User.Domain.Model.Entities.Client", "Client")
                        .WithMany("Trips")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_trips__clients_client_id");

                    b.HasOne("ACME.CargoApp.API.Registration.Domain.Model.Entities.Driver", "Driver")
                        .WithMany("Trips")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_trips__driver_driver_id");

                    b.HasOne("ACME.CargoApp.API.User.Domain.Model.Entities.Entrepreneur", "Entrepreneur")
                        .WithMany("Trips")
                        .HasForeignKey("EntrepreneurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_trips__entrepreneurs_entrepreneur_id");

                    b.HasOne("ACME.CargoApp.API.Registration.Domain.Model.Entities.Vehicle", "Vehicle")
                        .WithMany("Trips")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_trips__vehicle_vehicle_id");

                    b.OwnsOne("ACME.CargoApp.API.Registration.Domain.Model.ValueObjects.CargoData", "CargoData", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int")
                                .HasColumnName("id");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("type");

                            b1.Property<int>("Weight")
                                .HasColumnType("int")
                                .HasColumnName("weight");

                            b1.HasKey("Id")
                                .HasName("p_k_trips");

                            b1.ToTable("trips");

                            b1.WithOwner()
                                .HasForeignKey("Id")
                                .HasConstraintName("f_k_trips_trips_id");
                        });

                    b.OwnsOne("ACME.CargoApp.API.Registration.Domain.Model.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int")
                                .HasColumnName("id");

                            b1.Property<string>("TripName")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("name");

                            b1.HasKey("Id")
                                .HasName("p_k_trips");

                            b1.ToTable("trips");

                            b1.WithOwner()
                                .HasForeignKey("Id")
                                .HasConstraintName("f_k_trips_trips_id");
                        });

                    b.OwnsOne("ACME.CargoApp.API.Registration.Domain.Model.ValueObjects.TripData", "TripData", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int")
                                .HasColumnName("id");

                            b1.Property<DateTime>("LoadDate")
                                .HasColumnType("datetime(6)")
                                .HasColumnName("load_date");

                            b1.Property<string>("LoadLocation")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("load_location");

                            b1.Property<DateTime>("UnloadDate")
                                .HasColumnType("datetime(6)")
                                .HasColumnName("unload_date");

                            b1.Property<string>("UnloadLocation")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("unload_location");

                            b1.HasKey("Id")
                                .HasName("p_k_trips");

                            b1.ToTable("trips");

                            b1.WithOwner()
                                .HasForeignKey("Id")
                                .HasConstraintName("f_k_trips_trips_id");
                        });

                    b.Navigation("CargoData")
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Driver");

                    b.Navigation("Entrepreneur");

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("TripData")
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("ACME.CargoApp.API.Registration.Domain.Model.Entities.Alert", b =>
                {
                    b.HasOne("ACME.CargoApp.API.Registration.Domain.Model.Aggregates.Trip", "Trip")
                        .WithOne("Alert")
                        .HasForeignKey("ACME.CargoApp.API.Registration.Domain.Model.Entities.Alert", "TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_alerts_trips_trip_id");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("ACME.CargoApp.API.Registration.Domain.Model.Entities.Evidence", b =>
                {
                    b.HasOne("ACME.CargoApp.API.Registration.Domain.Model.Aggregates.Trip", "Trip")
                        .WithOne("Evidence")
                        .HasForeignKey("ACME.CargoApp.API.Registration.Domain.Model.Entities.Evidence", "TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_evidences_trips_trip_id");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("ACME.CargoApp.API.Registration.Domain.Model.Entities.Expense", b =>
                {
                    b.HasOne("ACME.CargoApp.API.Registration.Domain.Model.Aggregates.Trip", "Trip")
                        .WithOne("Expense")
                        .HasForeignKey("ACME.CargoApp.API.Registration.Domain.Model.Entities.Expense", "TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_expenses_trips_trip_id");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("ACME.CargoApp.API.Registration.Domain.Model.Entities.OngoingTrip", b =>
                {
                    b.HasOne("ACME.CargoApp.API.Registration.Domain.Model.Aggregates.Trip", "Trip")
                        .WithOne("OngoingTrip")
                        .HasForeignKey("ACME.CargoApp.API.Registration.Domain.Model.Entities.OngoingTrip", "TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_ongoing_trips_trips_trip_id");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("ACME.CargoApp.API.User.Domain.Model.Aggregates.User", b =>
                {
                    b.OwnsOne("ACME.CargoApp.API.User.Domain.Model.ValueObjects.SubscriptionPlan", "SubscriptionPlan", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int")
                                .HasColumnName("id");

                            b1.Property<string>("Subscription")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("subscription");

                            b1.HasKey("Id")
                                .HasName("p_k_users");

                            b1.ToTable("users");

                            b1.WithOwner()
                                .HasForeignKey("Id")
                                .HasConstraintName("f_k_users_users_id");
                        });

                    b.OwnsOne("ACME.CargoApp.API.User.Domain.Model.ValueObjects.UserAuthentication", "UserAuthentication", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int")
                                .HasColumnName("id");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("email");

                            b1.Property<string>("Password")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("password");

                            b1.HasKey("Id")
                                .HasName("p_k_users");

                            b1.ToTable("users");

                            b1.WithOwner()
                                .HasForeignKey("Id")
                                .HasConstraintName("f_k_users_users_id");
                        });

                    b.OwnsOne("ACME.CargoApp.API.User.Domain.Model.ValueObjects.UserData", "UserData", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int")
                                .HasColumnName("id");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("address");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("name");

                            b1.Property<string>("Phone")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("phone");

                            b1.Property<string>("Ruc")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("ruc");

                            b1.HasKey("Id")
                                .HasName("p_k_users");

                            b1.ToTable("users");

                            b1.WithOwner()
                                .HasForeignKey("Id")
                                .HasConstraintName("f_k_users_users_id");
                        });

                    b.Navigation("SubscriptionPlan")
                        .IsRequired();

                    b.Navigation("UserAuthentication")
                        .IsRequired();

                    b.Navigation("UserData")
                        .IsRequired();
                });

            modelBuilder.Entity("ACME.CargoApp.API.User.Domain.Model.Entities.Client", b =>
                {
                    b.HasOne("ACME.CargoApp.API.User.Domain.Model.Aggregates.User", "User")
                        .WithOne("Client")
                        .HasForeignKey("ACME.CargoApp.API.User.Domain.Model.Entities.Client", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_clients_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ACME.CargoApp.API.User.Domain.Model.Entities.Configuration", b =>
                {
                    b.HasOne("ACME.CargoApp.API.User.Domain.Model.Aggregates.User", "User")
                        .WithOne("Configuration")
                        .HasForeignKey("ACME.CargoApp.API.User.Domain.Model.Entities.Configuration", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_configurations_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ACME.CargoApp.API.User.Domain.Model.Entities.Entrepreneur", b =>
                {
                    b.HasOne("ACME.CargoApp.API.User.Domain.Model.Aggregates.User", "User")
                        .WithOne("Entrepreneur")
                        .HasForeignKey("ACME.CargoApp.API.User.Domain.Model.Entities.Entrepreneur", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_entrepreneurs_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ACME.CargoApp.API.Registration.Domain.Model.Aggregates.Trip", b =>
                {
                    b.Navigation("Alert")
                        .IsRequired();

                    b.Navigation("Evidence")
                        .IsRequired();

                    b.Navigation("Expense")
                        .IsRequired();

                    b.Navigation("OngoingTrip")
                        .IsRequired();
                });

            modelBuilder.Entity("ACME.CargoApp.API.Registration.Domain.Model.Entities.Driver", b =>
                {
                    b.Navigation("Trips");
                });

            modelBuilder.Entity("ACME.CargoApp.API.Registration.Domain.Model.Entities.Vehicle", b =>
                {
                    b.Navigation("Trips");
                });

            modelBuilder.Entity("ACME.CargoApp.API.User.Domain.Model.Aggregates.User", b =>
                {
                    b.Navigation("Client")
                        .IsRequired();

                    b.Navigation("Configuration")
                        .IsRequired();

                    b.Navigation("Entrepreneur")
                        .IsRequired();
                });

            modelBuilder.Entity("ACME.CargoApp.API.User.Domain.Model.Entities.Client", b =>
                {
                    b.Navigation("Trips");
                });

            modelBuilder.Entity("ACME.CargoApp.API.User.Domain.Model.Entities.Entrepreneur", b =>
                {
                    b.Navigation("Trips");
                });
#pragma warning restore 612, 618
        }
    }
}
